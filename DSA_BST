#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <sstream>
#include <algorithm>

using namespace std;

// Structure to hold course information
struct Course {
    string courseId;   // id for the course (e.g., "CS101")
    string title;      // Title of the course (e.g., "Introduction to Programming")
    string prerequisites; // Prerequisites for the course (comma-separated course IDs)

    // Default constructor
    Course() {}

    // Constructor for the course with ID, title, and prerequisites
    Course(string id, string t, string pre) : courseId(id), title(t), prerequisites(pre) {}
};

// Define a Node structure for Binary Search Tree (BST)
struct Node {
    Course course;  // Each node holds a course
    Node* left;     // Pointer to the left child node
    Node* right;    // Pointer to the right child node

    // Constructor that initializes a node with a course
    Node(Course c) : course(c), left(nullptr), right(nullptr) {}
};

// Binary Search Tree (BST) class to store and manage courses
class BinarySearchTree {
private:
    Node* root;  // Root of the binary search tree

    // Helper functions to manage the tree
    void addNode(Node* node, Course course);   // Recursively add a node to the tree
    void inOrder(Node* node);                   // Recursively traverse the tree in-order
    Node* searchNode(Node* node, const string& courseId);  // Searche for a course in the tree
    Node* removeNode(Node* node, const string& courseId);  // Remove course node from the tree

public:
    BinarySearchTree();   // Constructor for the BST

    void insert(Course course);   // Insert a new course into the BST
    void inOrder();   // Initiate in-order traversal
    Course search(const string& courseId);   // Searche for course by ID
    void remove(const string& courseId);   // Remove  course from the tree
    Course getCourse(const string& courseId); // Retrieve a course by ID
};

// Constructor for the BinarySearchTree class
BinarySearchTree::BinarySearchTree() : root(nullptr) {}

// Adds a course node to the tree, ensuring the BST properties are maintained
void BinarySearchTree::addNode(Node* node, Course course) {
    if (course.courseId < node->course.courseId) { // If the course ID is less, go to the left
        if (node->left == nullptr) {
            node->left = new Node(course);  // Insert a new node on the left
        } else {
            addNode(node->left, course);  // Recursively insert in the left subtree
        }
    } else {  // If the course ID is greater or equal, go to the right
        if (node->right == nullptr) {
            node->right = new Node(course);  // Insert a new node on the right
        } else {
            addNode(node->right, course);  // Recursively insert in the right subtree
        }
    }
}

// Insert a course into the binary search tree
void BinarySearchTree::insert(Course course) {
    if (root == nullptr) {  //  tree is empty　set the new course as the root
        root = new Node(course);
    } else {
        addNode(root, course);  // Otherwise, add the course to the tree
    }
}

// In-order traversal to print courses in alphanumeric order (sorted by course ID)
void BinarySearchTree::inOrder(Node* node) {
    if (node != nullptr) {
        inOrder(node->left);  // Traverse the left subtree first
        cout << node->course.courseId << ": " << node->course.title << " | Prerequisites: " << node->course.prerequisites << endl;  // Print course details
        inOrder(node->right);  // Traverse the right subtree
    }
}

// Public in-order traversal function to start from the root
void BinarySearchTree::inOrder() {
    inOrder(root);  // Start in-order traversal from the root
}

// Searche for a course by ID and returns the course if found
Course BinarySearchTree::search(const string& courseId) {
    Node* result = searchNode(root, courseId);  // Search the tree starting from the root
    if (result) {
        return result->course;  // If the course is found　return the course
    } else {
        return Course();  // Return an empty course if not found
    }
}

// Retrieves a course by ID
Course BinarySearchTree::getCourse(const string& courseId) {
    Node* result = searchNode(root, courseId);  // Search the tree starting from the root
    if (result) {
        return result->course;  // Return the course if found
    }
    return Course();  // Return an empty course if not found
}

// Searches for a course node in the tree
Node* BinarySearchTree::searchNode(Node* node, const string& courseId) {
    if (node == nullptr || node->course.courseId == courseId) {  // Base case: node is null or course ID matches
        return node;
    }

    if (courseId < node->course.courseId) {
        return searchNode(node->left, courseId);  // Search in the left subtree if the course ID is smaller
    } else {
        return searchNode(node->right, courseId);  // Search in the right subtree if the course ID is larger
    }
}

// Remove　course node from the tree
void BinarySearchTree::remove(const string& courseId) {
    root = removeNode(root, courseId);  // Start removal process from the root
}

// Remove a node with the given course ID
Node* BinarySearchTree::removeNode(Node* node, const string& courseId) {
    if (node == nullptr) {  // If the node is not found, return nullptr
        return node;
    }

    if (courseId < node->course.courseId) {
        node->left = removeNode(node->left, courseId);  // Search for the node in the left subtree
    } else if (courseId > node->course.courseId) {
        node->right = removeNode(node->right, courseId);  // Search for the node in the right subtree
    } else {
        if (node->left == nullptr) {  //  no left child, replace the node with its right child
            Node* temp = node->right;
            delete node;
            return temp;
        } else if (node->right == nullptr) {  //  no right child, replace the node with its left child
            Node* temp = node->left;
            delete node;
            return temp;
        }

        // If the node has two children, find the inorder smallest node in the right subtree
        Node* temp = node->right;
        while (temp && temp->left != nullptr) {
            temp = temp->left;
        }

        node->course = temp->course;  // Replace the course data with the inorder successor
        node->right = removeNode(node->right, temp->course.courseId);  // Remove the inorder successor
    }
    return node;
}

// Read course data from a CSV file and load it into the Binary Search Tree
void loadCoursesFromCSV(const string& filename, BinarySearchTree& bst) {
    ifstream file(filename);  // Open the CSV file
    string line, courseId, title, prerequisites;

    // Read each line from the CSV file
    while (getline(file, line)) {
        stringstream ss(line);
        getline(ss, courseId, ',');  // Read course ID
        getline(ss, title, ',');     // Read course title
        getline(ss, prerequisites);  // Read course prerequisites

        // Validate the CSV data has exactly two fields (course ID and course title)
        if (courseId.empty() || title.empty()) {
            cout << "Error: Invalid course data detected in the file (missing fields). Skipping this line.\n";
            continue;  // Skip this line if course ID or title is none
        }

        Course course(courseId, title, prerequisites);  // Create a course object
        bst.insert(course);  // Insert the course into the Binary Search Tree
    }

    file.close();  // Close the CSV file after reading
}

// Main menu 
void showMenu() {
    cout << "Menu:\n";
    cout << "1. Load course data\n";
    cout << "2. Print all courses\n";
    cout << "3. Print course details\n";
    cout << "9. Exit\n";
}

// check if the course ID is valid (non-empty)
bool isValidCourseId(const string& courseId) {
    return !courseId.empty();
}

// prompt the user until a valid course ID is entered
string getValidCourseId() {
    string courseId;
    while (true) {
        cout << "Enter course ID: ";
        cin >> courseId;  // Get course ID from the user

        // Check if course ID is valid
        if (isValidCourseId(courseId)) {
            return courseId;  // Return valid course ID
        } else {
            cout << "Error: Invalid course ID entered. Please try again with a valid ID.\n";
        }
    }
}

// display course details including prerequisites (with course names)
void printCourseDetailsWithPrerequisites(BinarySearchTree& bst, const string& courseId) {
    Course course = bst.getCourse(courseId);  // Get the course by ID
    if (!course.courseId.empty()) {
        cout << "Course: " << course.title << "\nPrerequisites: ";

        if (course.prerequisites.empty()) {
            cout << "No prerequisite for the course\n";  // If there are no prerequisites, display "No prerequisite for the course"
        } else {
            stringstream prereqs(course.prerequisites);
            string prereqId;
            while (getline(prereqs, prereqId, ',')) {
                Course prereqCourse = bst.getCourse(prereqId);  // Get each prerequisite course by ID
                if (!prereqCourse.courseId.empty()) {
                    cout << prereqCourse.title << " (ID: " << prereqCourse.courseId << "), ";
                } else {
                    cout << "No Prerequisite (ID: " << prereqId << "), ";
                }
            }
            cout << "\n";
        }
    } else {
        cout << "Error: Course with ID " << courseId << " not found.\n";  // If course not found
    }
}

// Main function
int main() {
    BinarySearchTree bst;  // Create a new binary search tree to store courses
    string filename = "C:\\Users\\YiYu\\OneDrive\\桌面\\CS300 Final\\CS 300 ABCU_Advising_Program_Input.csv"; // CSV file with course data (please adjust the path HERE)

    int choice;
    do {
        showMenu();  // Display the menu
        cout << "Enter your choice: ";
        cin >> choice;  // Get user input for the menu option

        // Validate the menu choice
        if (choice != 1 && choice != 2 && choice != 3 && choice != 9) {
            cout << "Error: Invalid choice. Please enter 1, 2, 3, or 9.\n";
            continue;
        }

        switch (choice) {
            case 1:
                loadCoursesFromCSV(filename, bst);  // Load courses from the CSV file into the BST
                cout << "Course data loaded.\n";
                break;
            case 2:
                bst.inOrder();  // Print all courses in alphanumeric order
                break;
            case 3: {
                string courseId = getValidCourseId();  // Prompt the user for a valid course ID
                printCourseDetailsWithPrerequisites(bst, courseId);  // Print course details and prerequisites
                break;
            }
            case 9:
                cout << "Thank you for using the system. Have a nice day : )\n";  // Exit the program
                break;
        }
    } while (choice != 9);  // Repeat until the user selects option 9 (exit)

    return 0;
}
